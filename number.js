var Integer,
    RADIX = Math.pow(10, 5),
    NUM_SIZE = Math.log10(RADIX);

Integer = function (s) {
    var sign = 1,
        nums = [],
        len = 0;

    if (s === '0') {
        sign = 0;
    }
    if (s[0] === '-') {
        sign = -1;
        s = s.slice(1);
    }    
    nums.push(parseInt(s.slice(-NUM_SIZE), 10));
    s = s.slice(0, -NUM_SIZE);
    for (len = s.length; len !== 0; len = s.length) {
        nums.push(parseInt(s.slice(-NUM_SIZE), 10));
        s = s.slice(0, -NUM_SIZE);
    }
    this.getSign = function () {
        return sign;
    };
    this.getNums = function () {
        return nums.slice();
    };
};

Integer.prototype.toString = function () {
    var result = '',
        nums = this.getNums(),
        len = nums.length,
        i,
        s,
        flag = false;

    if (this.getSign() === -1) {
        result += '-';
    } 
    for (i = len; i > 0; i -= 1) {
        s = nums[i - 1].toString();
        if (flag) {
            if (s.length < NUM_SIZE) {
                result += new Array(NUM_SIZE - s.length + 1).join('0');
            }
        } else {
            flag = true;
        }
        result += s;
    }
    return result;
};
Integer.prototype.toNumber = function () {
    return parseFloat(this.toString());
};
Integer.prototype.neg = function () {
    var s = this.toString();

    if (s[0] === '-')  {
        return new Integer(s.slice(1));
    }
    return new Integer('-' + s);
};
Integer.prototype.isZero = function () {
    return this.getSign() === 0;
};
Integer.prototype.isPositive = function () {
    return this.getSign() === 1;
};
Integer.prototype.isNegative = function () {
    return this.getSign() === -1;
};
Integer.prototype.factorial = function () {
    var result = new Integer('1'),
        t = new Integer(this.toString()),
        one = new Integer('1');

    for (;t.isPositive(); t = t.sub(one)) {
        result = result.mul(t);        
    }
    return result;
};
Integer.prototype.add = function (integer) {
    var nums1 = this.getNums(),
        sign1 = this.getSign(),
        len1 = nums1.length,
        nums2 = integer.getNums(),
        sign2 = integer.getSign(),
        len2 = nums2.length,
        nums3,
        nums4,
        len3,
        len4,
        sign3,
        n,
        a = 0,
        b,
        i,
        result = '',
        s,
        flag;

    if (len1 > len2) {
        nums3 = nums1;
        len3 = len1;
        sign3 = sign1;
        nums4 = nums2;
        len4 = len2;
    } else if (len1 < len2) {
        nums3 = nums2;
        len3 = len2;
        sign3 = sign2;
        nums4 = nums1;
        len4 = len1;
    } else if (nums1[len1 - 1] > nums2[len1 - 1]) {
        nums3 = nums1;
        len3 = len1;
        sign3 = sign1;
        nums4 = nums2;
        len4 = len2;
    } else {
        nums3 = nums2;
        len3 = len2;
        sign3 = sign2;
        nums4 = nums1;
        len4 = len1;
    }        
    if (sign1 === sign2) {
        for (i = 0; i < len4; i += 1) {
            n = nums3[i] + nums4[i] + a;
            if (n >= RADIX) {
                a = 1;
                b = n - RADIX;
            } else {
                a = 0;
                b = n;
            }
            nums3[i] = b;
        }
        for (i = len4; i < len3; i += 1) {
            n = nums3[i] + a;
            if (n >= RADIX) {
                a = 1;
                nums3[i] = n - RADIX;
            } else {
                a = 0;
                break;
            }            
        }
        if (a !== 0) {
            nums3[i] = a;
        }
        if (sign1 === -1) {
            result += '-';
        }
    } else {
        for (i = 0; i < len4; i += 1) {
            nums3[i] -= a;
            if (nums3[i] < nums4[i]) {
                a = 1;
                nums3[i] += RADIX;
            } else {
                a = 0;
            }        
            nums3[i] -= nums4[i];        
        }    
        for (i = len4; i < len3; i += 1) {
            nums3[i] -= a;
            if (nums3[i] < 0) {
                a = 1;
                nums3[i] += RADIX;
            } else {
                break;
            }
        }    
        for (i = len3; i > 0; i -= 1) {
            if (nums3[i - 1] === 0) {
                nums3.pop();
            } else {
                break;
            }
        }
        if (i === 0) {
            return new Integer("0");
        }
        if (sign3 === -1) {
            result += '-';
        }
    }
    flag = false;
    for (i = nums3.length; i > 0; i -= 1) {
        s = nums3[i - 1].toString();
        if (flag) {
            if (s.length < NUM_SIZE) {
                result += new Array(NUM_SIZE - s.length + 1).join('0');
            }
        } else {
            flag = true;
        }
        result += s;
    }
    return new Integer(result);
};
Integer.prototype.mul = function (z) {
    var nums1 = this.getNums(),
        sign1 = this.getSign(),
        len1 = nums1.length,
        nums2 = z.getNums(),
        sign2 = z.getSign(),
        len2 = nums2.length,
        nums3 = [],
        sign3 = sign1 * sign2,
        len3,
        n,
        a,
        b,
        i,
        j,
        result = '',
        s,
        flag = false;

    for (j = 0; j < len2; j += 1) {
        for (i = 0; i < len1; i += 1) {
            if (nums3[j + i] === undefined) {
                nums3[j + i] = nums1[i] * nums2[j];
            } else {
                nums3[j + i] += nums1[i] * nums2[j];
            }
        }
    }
    a = 0;
    for (i = 0, len3 = nums3.length; i < len3; i += 1) {
        n = nums3[i] + a;
        a = Math.floor(n / RADIX);
        b = n % RADIX;
        nums3[i] = b;
    }
    if (a !== 0) {
        nums3[i] = a;
    }
    if (sign3 === -1) {
        result += '-';
    }
    flag = false;
    for (i = nums3.length; i > 0; i -= 1) {
        s = nums3[i - 1].toString();
        if (flag) {
            if (s.length < NUM_SIZE) {
                result += new Array(NUM_SIZE - s.length + 1).join('0');
            }
        } else {
            flag = true;
        }
        result += s;
    }
    return new Integer(result);
};
Integer.prototype.sub = function (z) {
    return this.add(z.neg());
};
Integer.prototype.equal = function (z) {
    return this.toString() === z.toString();
};
Integer.prototype.lt = function (z) {
    return this.sub(z).isNegative();
};
Integer.prototype.le = function (z) {
    var t = this.sub(z);
    
    return t.isNegative() || t.isZero();
};
Integer.prototype.gt = function (z) {
    return this.sub(z).isPositive();
};
Integer.prototype.ge = function (z) {
    var t = this.sub(z);
    
    return t.isPositive() || t.isZero();
};

var n = new Integer
    m = new Integer("111111111112345");

console.log(n.toString
console.log(n.toNumber() === Infinity);
console.log(n.add(m).toString
console.log(m.add(n).toString

n = new Integer("-1234512345678901234567890");
m = new Integer("12345678901234567890");
console.log(n.add(m).toString() === '-1234500000000000000000000');

console.log(n.mul(m).toString() === '-15240893019361606448572501905199875019052100');

console.log(n.sub(n).toString() === '0')
console.log(m.sub(m).toString() === '0')
console.log(n.sub(m).toString() === '-1234524691357802469135780')
console.log(m.sub(n).toString() === '1234524691357802469135780')

n = new Integer('100');
console.log(n.factorial().toString() === '93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000');
console.log(new Integer('0').factorial().toString() === '1');
console.log(new Integer('1').factorial().toString() === '1');
console.log(new Integer('10').factorial().toString() === '3628800');

n = new Integer("12345");
m = new Integer("-12345");
console.log(n.equal(n));
console.log(!n.equal(m));
console.log(!n.lt(m));
console.log(!n.le(m));
console.log(n.gt(m));
console.log(n.ge(m));
console.log(n.le(n));
console.log(m.ge(m));
